# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

import React, {Component} from 'react';
import {connect} from 'react-redux';
import axios from 'axios';
import Users from './Users';
import Preloader from '../common/Preloader';

class UsersAPIComponent extends Component {
    componentDidMount() {
        const {
            isFetching,
            pageSize,
            currentPage,
            usersPage,
            setUsers,
            setTotalUsersCount,
            toogleIsFetching
        } = this.context;
        isFetching(true);
        if (usersPage.users.length === 0) {
            axios
                .get(`https://social-network.samuraijs.com/api/1.0/users?page=${currentPage}&count=${pageSize}`)
                .then((response) => response.data)
                .then((data) => {
                    toogleIsFetching(false);
                    setTotalUsersCount(data.totalCount);
                    setUsers(data.items);
                });
        }
        toogleIsFetching(false);
    }

    onPageChanged = (e) => {
        const {toogleIsFetching, changeActivePage, toogleIsFetching,setUsers} = this.context
        toogleIsFetching(true);
        changeActivePage(e);
        const {pageSize} = this.props;
        const currentPage = Number(e.target.textContent);
        axios
            .get(`https://social-network.samuraijs.com/api/1.0/users?page=${currentPage}&count=${pageSize}`)
            .then((response) => {
                toogleIsFetching(false);
                return response.data;
            })
            .then((data) =>setUsers(data.items));
    }

    render() {
        return (
        < > 
        {
            this.props.isFetching
                ? <Preloader/>
                : null
        }
        } < Users totalUsersCount = {
            this.props.totalUsersCount
        }
        pageSize = {
            this.props.pageSize
        }
        currentPage = {
            this.props.currentPage
        }
        onPageChanged = {
            this.onPageChanged
        }
        usersPage = {
            this.props.usersPage
        }
        followingUp = {
            this.props.followingUp
        }
        followingDown = {
            this.props.followingDown
        } /> {
            ' '
        } < / >
      );
    }
}

const mapStateTopProps = (state) => ({
   usersPage: state.usersPage,
   pageSize: state.usersPage.pageSize,
   totalUsersCount: state.usersPage.totalUsers,
   currentPage: state.usersPage.currentPage,
   isFetching: state.usersPage.isFetching,
});
const mapDispatchToProps = (dispatch) => ({
  followingUp: (id) => {
    dispatch({ type: 'FOLLOW', id });
  },
  followingDown: (id) => {
    dispatch({ type: 'UNFOLLOW', id });
  },
  setUsers: (users) => {
    dispatch({ type: 'SET_USERS', users });
  },
  changeActivePage: (e) => {
    const newCurrentPage = e.target.textContent;
    dispatch({ type: 'CHANGE-ACTIVE-PAGE', newCurrentPage });
  },
  setTotalUsersCount: (totalUsers) => {
    dispatch({ type: 'SET-TOTAL-USER-COUNT', totalUsers });
  },
  toogleIsFetching: (isFetching) => {
    dispatch({ type: 'TOGGLE_IS_FETCHING', isFetching });
  },
});

const UsersContainer = connect(mapStateTopProps, mapDispatchToProps)(UsersAPIComponent);

export default UsersContainer;

